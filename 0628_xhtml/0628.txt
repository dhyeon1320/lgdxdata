고급 프로그래밍 언어: 컴퓨터에게 일을 시키기 위해서 인간이 알아볼 수 있도록 만든 명령어의 집합
컴파일러나 인터프리터: 고급 프로그래밍 언어로 작성된 내용을 플랫폼(운영체제나 가상머신)이나 디바이스가 이해할 수 있는 코드로 번역해주는 프로그램

HTML, CSS, Javascript는 웹 브라우저가 번역해서 실행

IDE(통합 개발 환경): 프로그래밍 언어로 소스 코드를 작성하고 번역 및 빌드(실행할 수 있는 코드를 만드는 작업) 등을 편리하게 해주는 소프트웨어

- HTML answj
=> 확장자는 html 또는 htm - 일반적으로 html

- 구조
<!doctype html>
<html>
	<head>
		문서에 대한 정보
	</head>

	<body>
		화면에 보여지는 내용
	</body>
</html>

- 태그는 순서대로 읽어서 번역
- style은 코드를 전부 읽은 후 마지막에 읽어서 반영
- script도 순서대로 읽어서 번역한 후 실행
- html은 웹 브라우저가 해석해서 실행함 <- 브라우저에서 새로고침하면 바뀜

-속성
태그 안에 속성 이름="값"의 형태로 작성하여 태그의 옵션을 설정하는 것
모든 태그에 사용할 수 있는 속성이 있고 태그별로 별도로 갖는 속성이 있음

공통 속성
=> id : 페이지 내에서 구분하기 위한 이름 <- 같은 게 있으면 안 된다
=> class : 묶음을 만들기 위한 이름
=> name : 서버에게 데이터를 전달할 때 사용하기 위한 이름 <- 체크박스 등 여러개를 고를 때는 중복 있을 수 있음
=> data : 태그 안에 데이터를 포함하고자 할 경우

경로의 종류
=> 절대경로: 변하지 않는 경로
웹의 URL이 절대 경로: <a href = "https://www.naver.com">네이버</네이버>
c://?/?
/var/???

=> 상대경로: 현재 위치에서의 경로'
./ 나 앞에 기호를 생락하면 현재 위치

./: 상위 디렉토리

-------------------

git

*현재 작업 디렉토리를 git에 저장
=> 디렉토리로 프롬프트를 이동해서 git init 이라는 명령을 수행
.git 파일이 생성되고 이 파일이 생성되면 git이 소스 코드 버전 관리를 한다라는 뜻
git 명령이 수행되지 않는 경우 git을 환경 변수에 추가해주어야 함

=> 관리할 파일 등록
git add 파일명 파일명 ...

git add . : 현재 디렉토리의 모든 내용을 git이 관리하도록 설정

=> commit : 현재 변경 내용을 local git(내 컴퓨터)에 반영
git commit -m "메세지..."  ex) git commit -m "0628"

=> 변경 내역 확인 : git log

*로컬 git 내용을 github 사이트에 업로드
=> github 사이트에 repository 생성하고 url 복사
https://github.com/dhyeon1320/lgxhtml.git

=> 현재 git 디렉토리와 repository 연결
git remote add 이름 url
ex) git remote add origin https://github.com/dhyeon1320/lgxhtml.git

=> 코드를 업로드(push)
git push 저장소이름 브랜치이름
ex) git push origin main

*코드를 수정하고 수정한 내용을 git hub에 반영
git add .
git commit -m "메세지"
git push 이름 브랜치이름(브랜치 이름을 수정하면 별도의 장소에 보관됨)

*repository를 변경하고자 하면 git remote add 명령 다시 수행

*원격 저장소의 내용을 가져오기
git clone 저장소url 저장소이름